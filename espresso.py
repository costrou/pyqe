"""
An assistant to QE (Quantum Espresso) via python
currently my aim is to support the fortran syntax

See
http://www.quantum-espresso.org/wp-content/uploads/Doc/pw_user_guide/node8.html
for details on the input format to PW

'!#' - fortran comment characters


"""
# Global
QE_TAB = "    "

from cards import AtomicSpecies, AtomicPositions, KPoints, CellParameters
from namelist import Control, System

class QE:
    """
    Quantum Espresso Main Class

    From this class you can:
     - initialize the input
     - create inputfile
     - run pw.x
    """

    def __init__(self):
        self.control = Control()
        self.system = System()
        self.electrons = NameList("ELECTRONS")
        self.ions = NameList("IONS")
        self.cell = NameList("CELL")

        self.atomic_species = AtomicSpecies()
        self.atomic_positions = AtomicPositions()
        self.k_points = KPoints()
        self.cell_parameters = CellParameters()
        # Not Implemented (Card not a class)
        #self.occupations = Card("OCCUPATIONS")
        #self.constrains = Card("CONTRAINTS")
        #self.atomicforces = Card("ATOMIC_FORCES")

    def __str__(self, header=True):
        qe_str = ""
        if (header == True):
            qe_str += """! File Autogenerated from Python QE
! written and mainted by Chris Ostrouchov
"""
        ## NameLists
        qe_str += str(self.control)
        qe_str += str(self.system)
        qe_str += str(self.electrons)
        qe_str += str(self.ions)
        qe_str += str(self.cell)

        ## Cards
        qe_str += str(self.atomic_species)

        # Only needed if calculations is not
        # 'band' or 'nscf'
        if self.control.keypairs.get("calculation") not in ["nscf", "bands"]:
            qe_str += str(self.atomic_positions)

        qe_str += str(self.k_points)

        # Only needed if unitcell is not defined
        # By ibrav
        if self.system.keypairs.get("ibrav") == 0:
            qe_str += str(self.cell_parameters)

        # Not Implemented
        # qe_str += str(self.occupations)
        # qe_str += str(self.contraints)
        # qe_str += str(self.atomic_forces)
        return qe_str

    def to_file(self, filename, input_format="fortran"):
        """
        Writes QE configuration to <filename>
        in format specified. Currently only supports
        the Fortran style.
        """
        with open(filename, "w") as qefile:
            qefile.write(str(self))

    def run(self, infile="", outfile="", errfile=""):
        """
        Runs QE pw.x.

        If stdin, stdout, stderr filenames are not defined
        no file is created for the given input or output.

        If 'in_filename' is defined the program will run from the
        file rather than stdin via '-i'.

        Notice:
        QE will still create the save files in the directory
        specified by 'outfile' in control namelist
        """
        from subprocess import Popen, PIPE

        if infile != "":
            self.to_file(infile)

            pw_command = ["pw.x", '-i', infile]
            proc = Popen(pw_command, stdout=PIPE, stderr=PIPE)
            pw_output = proc.communicate()
        else:
            pw_input = str(self)

            pw_command = ["pw.x"]
            proc = Popen(pw_command, stdin=PIPE, stdout=PIPE, stderr=PIPE)
            pw_output = proc.communicate(pw_input.encode())

        proc.wait()
        pw_out = pw_output[0].decode()
        pw_err = pw_output[1].decode()

        if outfile != "":
            with open(outfile, "w") as out_file:
                out_file.write(pw_out)

        if errfile != "":
            with open(errfile, "w") as err_file:
                err_file.write(pw_err)

        return [pw_out, pw_err]

    def validate(self):
        """
        Each Namelist and Cards will validate its contents.
        Sometimes they will need access to global information.
        (not sure how to handle this yet)
        """
        self.control.validate(self)
        # Not Implemented
        # self.system.validate()
        # self.electrons.validate()
        # self.ions.validate()
        # self.cell.validate()

        self.atomic_species.validate()
        self.atomic_positions.validate()
        self.k_points.validate()
        self.cell_parameters.validate()
        # Not Implemented
        # self.occupations.validate()
        # self.constrains.validate()
        # self.atomicforces.validate()


class NameList:
    """
    A class for representing QE NameLists.

    Acceptable names:
    Control: general variables controlling the run
    System: structural information on the system
    Electrons: electronic variables (smearing, self-consistency)
    Ions (optional): ionic variables relaxation dynamics
    Cell (optional): variable-cell optimization
    """
    def __init__(self, name):
        self.name = name
        self.keypairs = {}

    def __str__(self):
        if (len(self.keypairs) == 0):
            return ""

        namelist_str = " &{0}\n".format(self.name)

        for key, value in self.keypairs.items():
            if (type(value) == str):
                namelist_str += QE_TAB + "{0} = '{1}'\n".format(key, value)
            else:
                namelist_str += QE_TAB + "{0} = {1}\n".format(key, value)
        namelist_str += " /\n"

        return namelist_str

    def update(self, keypairs):
        """
        Adds keypairs to current dictionary.
        Overides current keypair if any conflict.
        """
        self.keypairs.update(keypairs)


