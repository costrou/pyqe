"""
An assistant to QE (Quantum Espresso) via python
currently my aim is to support the fortran syntax

See
http://www.quantum-espresso.org/wp-content/uploads/Doc/pw_user_guide/node8.html
for details on the input format to PW

'!#' - fortran comment characters

"""

qe_tab = "   "

class QE:
    def __init__(self):
        self.control = NameList("control")
        self.system = NameList("system")
        self.electrons = NameList("electrons")
        self.ions = NameList("ions")
        self.cell = NameList("cell")

        self.atomic_species = Card("ATOMIC_SPECIES")
        self.atomic_positions = Card("ATOMIC_POSITIONS")
        self.k_points = Card("K_POINTS")
        self.cell_parameters = Card("CELL_PARAMETERS")
        self.occupations = Card("OCCUPATIONS")

    def __str__(self, header=True):
        qe_str = ""
        if (header == True):
            qe_str += """! File Autogenerated from Python QE
! written and mainted by Chris Ostrouchov
"""
        qe_str += str(self.control)
        qe_str += str(self.system)
        qe_str += str(self.electrons)
        qe_str += str(self.ions)
        qe_str += str(self.cell)
        qe_str += str(self.atomic_species)
        qe_str += str(self.atomic_positions)
        qe_str += str(self.k_points)
        qe_str += str(self.cell_parameters)
        qe_str += str(self.occupations)
        return qe_str


    def to_file(self, filename, input_format="fortran"):
        """
        Writes QE configuration to <filename>
        in format specified. Currently only supports
        the Fortran style.
        """
        qefile =  open(filename, "w")
        qefile.write(str(self))
        qefile.close()

    def run(self, infile="", outfile="", errfile=""):
        """
        Runs QE pw.x.

        If stdin, stdout, stderr filenames are not defined
        no file is created for the given input or output.

        If 'in_filename' is defined the program will run from the
        file rather than stdin via '-i'.

        Notice:
        QE will still create the save files in the directory
        specified by 'outfile' in control namelist
        """
        from subprocess import Popen, PIPE
        qe_command = ['pw.x']
        stdin = PIPE
        qe_input = str(self)

        if infile != "":
            self.to_file(infile)

            qe_command += ['-i', infile]
            stdin = None
            qe_input = None

        proc = Popen(qe_command, stdin=stdin, stdout=PIPE, stderr=PIPE)
        qe_output = proc.communicate(input=qe_input)
        proc.wait()

        if outfile != "":
            with open(outfile, "w") as out_file:
                out_file.write(qe_output[0])

        if errfile != "":
            with open(errfile, "w") as err_file:
                err_file.write(qe_output[1])

        return qe_output


class NameList:
    """
    A class for representing QE NameLists.

    Acceptable names:
    Control: general variables controlling the run
    System: structural information on the system
    Electrons: electronic variables (smearing, self-consistency)
    Ions (optional): ionic variables relaxation dynamics
    Cell (optional): variable-cell optimization
    """
    def __init__(self, name):
        self.name = name
        self.items = {}

    def __str__(self):
        if (len(self.items) == 0):
            return ""

        namelist_str = " &{0}\n".format(self.name)

        for item in self.items.iteritems():
            if (type(item[1]) == str):
                namelist_str += qe_tab + "{0} = '{1}'\n".format(item[0], item[1])
            else:
                namelist_str += qe_tab + "{0} = {1}\n".format(item[0], item[1])
        namelist_str += " /\n"

        return namelist_str

    def update(self, items):
        """
        Adds items(keypairs) to current dictionary.
        Overides current keypair if any are the same.
        """
        self.items.update(items)


class Card:
    """
    A class for representing QE Cards.
    """
    def __init__(self, name):
        self.name = name
        self.option = ""
        self.items = []

    def __str__(self):
        if (len(self.items) == 0):
            return ""

        if self.option == "":
            card_str = "{0}\n".format(self.name)
        else:
            card_str = "{0} ({1})\n".format(self.name, self.option)

        for item in self.items:
            card_str += qe_tab + " ".join([str(_) for _ in item]) + "\n"

        return card_str

    def update(self, items):
        """
        Adds items(keypairs) to current dictionary.
        Overides current keypair if any are the same.
        """
        self.items = []
        self.items.append(items)
